###############1、
import matplotlib.pyplot as plt
import numpy as np

x=np.linspace(0.1,2*np.pi,41)
y=np.exp(np.sin(x))

plt.stem(x,y,use_line_collection=True)


markerline, stemlines, baseline=plt.stem(x,y,linefmt='grey', markerfmt='D',bottom=1.1,
                use_line_collection=True)

markerline.set_markerfacecolor('none')

############2、
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.dates as mdates
from datetime import datetime

try:
    import urllib.request
    import json
    
    url = 'https://api.github.com/repos/matplotlib/matplotlib/releases'
    url += '?per_page=100'
    data = json.loads(urllib.request.urlopen(url, timeout=.4).read().decode())
          #将字符型数据转换成原有的数据格式
    dates=[]
    names=[]
    
    for item in data:
        if 'rc' not in item['tag_name'] and 'b' not in item['tag_name']:
            dates.append(item['published_at'].split("T")[0])
            names.append(item['tag_name'])
    
    dates=[datetime.strptime(d,"%Y-%m-%d") for d in dates]
    
except Exception:
    names=['v2.2.4', 'v3.0.3', 'v3.0.2', 'v3.0.1', 'v3.0.0', 'v2.2.3',
             'v2.2.2', 'v2.2.1', 'v2.2.0', 'v2.1.2', 'v2.1.1', 'v2.1.0',
             'v2.0.2', 'v2.0.1', 'v2.0.0', 'v1.5.3', 'v1.5.2', 'v1.5.1',
             'v1.5.0', 'v1.4.3', 'v1.4.2', 'v1.4.1', 'v1.4.0']
    dates=['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',
             '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',
             '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',
             '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',
             '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',
             '2014-10-26', '2014-10-18', '2014-08-26']
    dates=[datetime.strptime(d,"Y-%m-%d") for d in dates]

levels=np.tile([-5,5,-3,3,-1,1],int(np.ceil(len(dates)/6)))[:len(dates)]

fig, ax=plt.subplots(figsize=(8.8,4))
ax.set(title='Matplotlib release dates')

markerline, stemline, baseline=ax.stem(dates,levels,linefmt='C3-',basefmt='k-',
                                      use_line_collection=True)
#stem(),产生一个竖线，在x处从baseline到y，并在y值处放置一个标记
#linefmt.竖线的属性；markerfmt：标记的属性；baseline：基准线的属性
#bottom:基准线的位置；label：用于图例的stem的名称；
#use_line_collection:用于使stem line 存储为不同的对象
#返回的是：标记线性对象、树干线性对象，基准线对象

plt.setp(markerline, mec='k',mfc='w',zorder=3) #为markerline设置属性
markerline.set_ydata(np.zeros(len(dates)))

vert=np.array(['top','bottom'])[(levels>0).astype(int)] #生成13个top12个bottom

for d, l, r, va in zip(dates,levels,names,vert):
    ax.annotate(r,xy=(d,l),xytext=(-3,np.sign(l)*3),textcoords='offset points',
               va=va,ha='right')

ax.get_xaxis().set_major_locator(mdates.MonthLocator(interval=4)) #x轴主要刻度位置

ax.get_xaxis().set_major_formatter(mdates.DateFormatter('%b %Y')) #X轴刻度的格式

plt.setp(ax.get_xticklabels(),rotation=30,ha='right')

ax.get_yaxis().set_visible(False)

for spine in ['left','top','right']:
    ax.spines[spine].set_visible(False)  #设置坐标轴的属性
    
ax.margins(y=0.1) #页边距


############3、




