


###########1、plot() and parameter-dashes, and set_dashes() function##############
import numpy as np
import matplotlib.pyplot as plt

x=np.linspace(0,10,500)
y=np.sin(x)

fig,ax=plt.subplots()

line1,=ax.plot(x,y,label='Using set_dashes()')
line1.set_dashes([2,2,10,2])

line2,=ax.plot(x,y-0.2,dashes=[6,2],label='Using the dashes parameter')

ax.legend()


##########2、marker and fill_style

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

points=np.ones(5)
marker_style=dict(color='tab:blue',linestyle=':',marker='o',
                 markersize=15,markerfacecoloralt='tab:red')

fig,ax=plt.subplots()

for y, fill_style in enumerate(Line2D.fillStyles):
    ax.text(-0.5,y,repr(fill_style),horizontalalignment='center',
           verticalalignment='center')
    ax.plot(y*points,fillstyle=fill_style,**marker_style)
    
ax.set_axis_off()
ax.set_title('fill style')

plt.show()

###########3、path

import matplotlib.pyplot as plt
import matplotlib.path as mpath
import numpy as np

star=mpath.Path.unit_regular_star(6)  #6个顶角的星星
circle=mpath.Path.unit_circle()       #单位圆


verts=np.concatenate([circle.vertices,star.vertices[::-1,...]])  #合并
                                       #在行上翻转了一下

codes=np.concatenate([circle.codes,star.codes])
cut_star=mpath.Path(verts,codes)#注意：这两个参数

plt.plot(np.arange(10)**2,'--r',marker=cut_star,markersize=15)


#######4、marker_style
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

points=np.ones(3)
text_style=dict(horizontalalignment='right', verticalalignment='center',
               fontsize=12,fontdict={'family':'monospace'})
marker_style=dict(linestyle=':',color='0.8',markersize=10,mfc='C0',mec='C0')

def format_axes(ax):
    ax.margins(0.2)
    ax.set_axis_off() #把坐标轴关掉
    ax.invert_yaxis()
    
def split_list(a_list):
    i_half=len(a_list)//2  #取整
    return (a_list[:i_half],a_list[i_half:])

fig, axes=plt.subplots(ncols=2)
fig.suptitle('un-filled markers', fontsize=14)

unfilled_markers=[m for m, func in Line2D.markers.items() #markers,字典{符号:名称}
                  if func!='nothing' and m not in Line2D.filled_markers] #filled_markers,部分符号
for ax, markers in zip(axes, split_list(unfilled_markers)):
    for y, marker in enumerate(markers):
        ax.text(-0.5,y,repr(marker),**text_style)
        ax.plot(y*points,marker=marker,**marker_style)
    format_axes(ax)

fig, axes=plt.subplots(ncols=2)
for ax, markers in zip(axes,split_list(Line2D.filled_markers)):
    for y, marker in enumerate(markers):
        ax.text(-0.5,y,repr(marker),**text_style)
        ax.plot(y*points,marker=marker, **marker_style)
    format_axes(ax)
    
fig.suptitle('filled markers',fontsize=14)


#############5、markevery
import matplotlib.pyplot as plt
import numpy as py
import matplotlib.gridspec as gridspec

cases=[None,8,(30,8),[16,24,30],[0,-1],slice(100,200,3),0.1,0.3,1.5,(0.0,1.0),(0.45,0.1)]

figsize=(10,8)
cols=3
rows=len(cases)//cols+1

delta=0.11
x=np.linspace(0,10-2*delta,200)+delta
y=np.sin(x)+1.0+delta

def trim_axes(axes,N):
    axes=axes.flat
    for ax in axes[N:]:
        ax.remove()
    return axes[:N]

fig1, axes=plt.subplots(rows,cols,figsize=figsize)
axes=trim_axes(axes,len(cases))
for ax, case in zip(axes,cases):
    ax.set_title('markerevery=%s' % str(case))
    ax.plot(x,y,'o',ls='-',ms=4,markevery=case)
    
fig2, axes=plt.subplots(rows,cols,figsize=figsize)
axes=trim_axes(axes,len(cases))


for ax, case in zip(axes, cases):
    ax.set_title('markevery=%s' % str(case))
    ax.set_xscale('log')
    ax.set_yscale('log')
    
    ax.plot(x,y,'o',ls='-',ms=4, markevery=case)

fig3, axes=plt.subplots(rows,cols,figsize=figsize)
axes=trim_axes(axes,len(cases))

for ax, case in zip(axes, cases):
    ax.set_title('markevery=%s' % str(case))
    ax.plot(x,y,'o',ls='-',ms=4, markevery=case)
    ax.set_xlim((6,6.7))
    ax.set_ylim((1.1,1.7))
    
    

import matplotlib.pyplot as plt
import numpy as py
import matplotlib as mpl
from cycler import cycler

cases=[None,8,(30,8),[16,24,30],[0,-1],slice(100,200,3),0.1,0.3,1.5,(0.0,1.0),(0.45,0.1)]

colors= ['#1f77b4',
          '#ff7f0e',
          '#2ca02c',
          '#d62728',
          '#9467bd',
          '#8c564b',
          '#e377c2',
          '#7f7f7f',
          '#bcbd22',
          '#17becf',
          '#1a55FF']

#mpl.rcParams['axes.prop_cycle'] = cycler(markevery=cases, color=colors)


x=np.linspace(0,2*np.pi)
offsets=np.linspace(0,2*np.pi,11,endpoint=False)
yy=np.transpose([np.sin(x+phi) for phi in offsets]) #改变序列

fig = plt.figure()
ax=fig.add_axes([0.1,0.1,0.6,0.75])

for i in range(len(cases)):
    ax.plot(yy[:,i],marker='o',label=str(cases[i]))
    ax.legend(bbox_to_anchor=(1.05,1), loc='upper left',borderaxespad=0)
    
plt.title('Support for axes.prop_cycle cycler with markevery')
   
   
   
   
############6、numpy.ma.masked_where()##########
import matplotlib.pyplot as plt
import numpy as np

x=np.arange(0,2*np.pi,0.02)
y=np.sin(x)
y1=np.sin(x*2)
y2=np.sin(x*3)
ym1=np.ma.masked_where(y1>0.5,y1)    #取y1<=0.5

ym2=np.ma.masked_where(y2<-0.5,y2)   #y2>=-0.5

lines=plt.plot(x,y,x,ym1,x,ym2,'o')
plt.setp(lines[0], linewidth=4)
plt.setp(lines[1], linewidth=2)
plt.setp(lines[2], markersize=10)

plt.legend(('No mask','Masked if >0.5','masked if <-0.5'),loc='upper right')

plt.title('Masked line demo')

###############7、
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm

x=np.linspace(0, 3*np.pi,500)
y=np.sin(x)
dydx=np.cos(0.5*(x[:-1]+x[1:]))    #导数

points=np.array([x,y]).T.reshape(-1,1,2)  #-1代表该维度无所谓
segments=np.concatenate([points[:-1], points[1:]], axis=1)

fig, axes=plt.subplots(2,1,sharex=True, sharey=True)

norm=plt.Normalize(dydx.min(), dydx.max()) 
print(dydx.min())
print(dydx.max())
print(norm)
lc=LineCollection(segments, cmap='viridis', norm=norm)
                 #segments为（line0,line1,...） where line0=(x0,y0),(x1,y1),...
                 #norm,Normalize实例

lc.set_array(dydx)   #？？？？？
lc.set_linewidth(2)
line=axes[0].add_collection(lc)
fig.colorbar(line, ax=axes[0])

cmap=ListedColormap(['r','g','b']) #自定义
norm=BoundaryNorm([-1,-0.5,0.5,1], cmap.N)
lc=LineCollection(segments, cmap=cmap, norm=norm)  #线形集合
lc.set_array(dydx)
lc.set_linewidth(2)
line=axes[1].add_collection(lc)   #在绘画区域添加线形
fig.colorbar(line, ax=axes[1])    #在窗口添加colorbar

axes[0].set_xlim(x.min(), x.max())
axes[0].set_ylim(-1.1, 1.1)


########8、plot and NaN
import numpy as np
import matplotlib.pyplot as plt

t=np.arange(0,1.01,0.01)
s=np.cos(2*2*np.pi*t)
t[41:60]=np.nan

plt.subplot(2,1,1)
plt.plot(t,s,'-',lw=2)

plt.xlabel('time(s)')
plt.ylabel('voltage(mV)')
plt.title('A sine wave with a gap of NAN between 0.4 and 0.6')
plt.grid(True)

plt.subplot(2,1,2)
t[0]=np.nan
t[-1]=np.nan
plt.plot(t,s,'-',lw=2)
plt.title('Also with NaN in first and last point')

plt.xlabel('time(s)')
plt.ylabel('more nans')
plt.grid(True)

plt.tight_layout()


#############9、



