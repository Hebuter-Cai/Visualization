##############??????不出图
import numpy as np
import matplotlib as mpl
mpl.use('TkAgg')
import matplotlib.pyplot as plt

%matplotlib inline
fig=plt.figure()
Z=np.arange(10000).reshape((100,100))
Z[:,50:]=1

im1=fig.figimage(Z,xo=50,yo=0,origin='lower')
im2=fig.figimage(Z,xo=100,yo=100,alpha=0.8,origin='lower')        
plt.show()

################2/ imshow()显示图片
import numpy as np
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import matplotlib.cbook as cbook
from matplotlib.path import Path
from matplotlib.patches import PathPatch

delta=0.025
x=y=np.arange(-3,3,delta)
X,Y=np.meshgrid(x,y)
Z1 = np.exp(-X**2 - Y**2)
Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
Z = (Z1 - Z2) * 2

fig, ax=plt.subplots()
im=ax.imshow(Z,interpolation='bilinear',cmap=cm.RdYlGn,origin='lower',
            extent=[-3,3,-3,3],vmax=abs(Z).max(),vmin=-abs(Z).max())
                               #colorbar
##(2) another method to show image 图片
with cbook.get_sample_data(r'C:\Users\Administrator\one.jpg') as image_file:
    image=plt.imread(image_file)

fig,ax=plt.subplots()
ax.imshow(image)
ax.axis('off')

##(3) another method to show image 字符流
w, h=512,512
with cbook.get_sample_data('ct.raw.gz') as datafile:
    s=datafile.read()
A = np.frombuffer(s, np.uint16).astype(float).reshape((w, h))    
#A=np.frombuffer(s,np.uint16).astype(float).reshape((w,h))
A/=A.max()

fig, ax=plt.subplots()
etend=(0,25,0,25)
im=ax.imshow(A,cmap=plt.cm.hot,origin='upper',extent=extent)

markers=[(15.9,14.5),(16.8,15)]
x,y=zip(*markers)
ax.plot(x,y,'o')

ax.set_title('CT density')

##(4) interpolation of imshow()
A=np.random.rand(5,5)
print(A)
fig,axes=plt.subplots(1,3,figsize=(10,3))

for ax, interp in zip(axes,['nearest','bilinear','bicubic']):
    ax.imshow(A,interpolation=interp)
    ax.set_title(interp.capitalize())
    ax.grid(True)

##(5) origin of imshow()
x=np.arange(120).reshape((10,12))
#print(x)
interp='bilinear'
fig,axes=plt.subplots(nrows=2,sharex=True,figsize=(3,5))
axes[0].set_title('blue should be up')
axes[0].imshow(x,origin='upper',interpolation=interp)

axes[1].set_title('blue should be down')
axes[1].imshow(x,origin='lower',interpolation=interp)

##(6) clip
delta=0.025
x = y = np.arange(-3.0, 3.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = np.exp(-X**2 - Y**2)
Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
Z = (Z1 - Z2) * 2

path=Path([[0,1],[1,0],[0,-1],[-1,0],[0,1]])

patch=PathPatch(path,facecolor='none')

fig, ax=plt.subplots()
ax.add_patch(patch)

im=ax.imshow(Z,interpolation='bilinear',cmap=cm.gray,origin='lower',
            extent=[-3,3,-3,3],clip_path=patch,clip_on=True)
im.set_clip_path(patch)



###########3 imshow() and annotate() and text()
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

vegetables=["cucumber", "tomato", "lettuce", "asparagus",
              "potato", "wheat", "barley"]
farmers = ["Farmer Joe", "Upland Bros.", "Smith Gardening",
           "Agrifun", "Organiculture", "BioGoods Ltd.", "Cornylee Corp."]

harvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],
                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],
                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],
                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])

fig,ax=plt.subplots()
im=ax.imshow(harvest)

ax.set_xticks(np.arange(len(farmers)))
ax.set_yticks(np.arange(len(vegetables)))

ax.set_xticklabels(farmers)
ax.set_yticklabels(vegetables)

plt.setp(ax.get_xticklabels(),rotation=45,ha='right',rotation_mode='anchor')

for i in range(len(vegetables)):
    for j in range(len(farmers)):
        text=ax.text(j,i,harvest[i,j],ha='center',va='center',color='w')
        
ax.set_title('Harvest of local farmers (in tons/year)')
fig.tight_layout()

#############4/
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# sphinx_gallery_thumbnail_number = 2

vegetables = ["cucumber", "tomato", "lettuce", "asparagus",
              "potato", "wheat", "barley"]
farmers = ["Farmer Joe", "Upland Bros.", "Smith Gardening",
           "Agrifun", "Organiculture", "BioGoods Ltd.", "Cornylee Corp."]

harvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],
                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],
                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],
                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])


fig, ax = plt.subplots()
im = ax.imshow(harvest)

# We want to show all ticks...
ax.set_xticks(np.arange(len(farmers)))
ax.set_yticks(np.arange(len(vegetables)))
# ... and label them with the respective list entries
ax.set_xticklabels(farmers)
ax.set_yticklabels(vegetables)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

# Loop over data dimensions and create text annotations.
for i in range(len(vegetables)):
    for j in range(len(farmers)):
        text = ax.text(j, i, harvest[i, j],
                       ha="center", va="center", color="w")

ax.set_title("Harvest of local farmers (in tons/year)")
fig.tight_layout()
plt.show()


##(2)
def heatmap_fun(data,row_labels,col_labels,ax=None,cbar_kw={},cbarlabel='',**kwargs):
    if not ax:
        ax=plt.gca() #获得当前的
    
    im=ax.imshow(data,**kwargs)
    
    cbar=ax.figure.colorbar(im,ax=ax,**cbar_kw)
    cbar.ax.set_ylabel(cbarlabel,rotation=-90,va='bottom')
    
    ax.set_xticks(np.arange(data.shape[1]))
    ax.set_yticks(np.arange(data.shape[0]))
    
    ax.set_xticklabels(col_labels)
    ax.set_yticklabels(row_labels)
    
    ax.tick_params(top=True,bottom=False,labeltop=True,labelbottom=False)
    
    plt.setp(ax.get_xticklabels(),rotation=-30,ha='right',rotation_mode='anchor')
    
    for edge, spine in ax.spines.items():
        spine.set_visible(False)
        
    ax.set_xticks(np.arange(data.shape[1]+1)-0.5,minor=True)
    ax.set_yticks(np.arange(data.shape[0]+1)-0.5,minor=True)
    ax.grid(which='minor',color='w',linestyle='-',linewidth=3)
    ax.tick_params(which='minor',bottom=False,left=False)
    
    return im, cbar
    
def annotate_heatmap(im,data=None,valfmt='{x:.2f}',textcolors=['black','white'],
                    threshold=None,**textkw):
    if not isinstance(data,(list,np.ndarray)):
        data=im.get_array()
    
    if threshold is not None:
        threshold=im.norm(threshold)
    else:
        threshold=im.norm(data.max())/2
        
    kw=dict(horizontalalignment='center',verticalalignment='center')
    kw.update(textkw)
    
    if isinstance(valfmt,str):
        valfmt=mpl.ticker.StrMethodFormatter(valfmt)
        
    texts=[]
    for i in range(data.shape[0]):
        for j in range(data.shape[1]):
            
            kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
            text=im.axes.text(j,i,valfmt(data[i,j],None),**kw)
            texts.append(text)
            
    return texts

fig, ax=plt.subplots()
im,cbar=heatmap_fun(harvest,vegetables,farmers,ax=ax,cmap='YlGn',cbarlabel='harvest[t/year]')
texts=annotate_heatmap(im,valfmt='{x:.1f} t')

fig.tight_layout()
    
##(3)
np.random.seed(19680801)

fig, ((ax1,ax2),(ax3,ax4))=plt.subplots(2,2,figsize=(8,6))

im,_=heatmap_fun(harvest,vegetables,farmers,ax=ax1,cmap='Wistia',cbarlabel='harvest [t/year]')
annotate_heatmap(im,valfmt='{x:.1f}',size=7)

data=np.random.randint(2,100,size=(7,7)) #7行7列
y=['Book {}'.format(i) for i in range(1,8)]
x=['Store {}'.format(i) for i in list('ABCDEFG')]
im,_=heatmap_fun(data,y,x,ax=ax2,vmin=0,cmap='magma_r',cbarlabel='weekly sold copies')
annotate_heatmap(im,valfmt='{x:d}',size=7,threshold=20,textcolors=['red','white'])

data=np.random.randn(6,6)
y=['Prod. {}'.format(i) for i in range(10,70,10)]
x=['Cycle {}'.format(i) for i in range(1,7)]

qrates=np.array(list('ABCDEFG'))
norm=mpl.colors.BoundaryNorm(np.linspace(-3.5,3.5,8),7)
                             #分割点数值，           colorbar中采用颜色的个数
fmt=mpl.ticker.FuncFormatter(lambda x,pos:qrates[::-1][norm(x)])

im,_=heatmap_fun(data,y,x,ax=ax3,cmap=plt.get_cmap('PiYG',7),norm=norm,
                cbar_kw=dict(ticks=np.arange(-3,4),format=fmt),cbarlabel='Quality Rating')
annotate_heatmap(im,valfmt=fmt,size=9,fontweight='bold',threshold=-1,
                textcolors=['red','black'])

corr_matrix=np.corrcoef(np.random.rand(6,5))  #将数值约束在-1和1之间

im,_=heatmap_fun(corr_matrix,vegetables,vegetables,ax=ax4,cmap='PuOr',vmin=-1,vmax=1,
            cbarlabel='correlation coeff')

def func(x,pos):
    return '{:.2f}'.format(x).replace('0.','.').replace('1.00','')

annotate_heatmap(im,valfmt=mpl.ticker.FuncFormatter(func),size=7)

plt.tight_layout()


################5/ imshow and masked_date
from copy import copy

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors

x0,x1=-5,5
y0,y1=-3,3
x=np.linspace(x0,x1,500)
y=np.linspace(y0,y1,500)
X,Y=np.meshgrid(x,y)
Z1 = np.exp(-X**2 - Y**2)  #e的幂次方
Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
Z = (Z1 - Z2) * 2

palette=copy(plt.cm.gray)
palette.set_over('r',1.0)
palette.set_under('g',1.0)
palette.set_bad('b',1.0)

Zm=np.ma.masked_where(Z>1.2,Z)

fig, (ax1,ax2)=plt.subplots(nrows=2,figsize=(6,5.4))

im=ax1.imshow(Zm,interpolation='bilinear',cmap=palette,norm=colors.Normalize(vmin=-1.0,vmax=1.0),
             aspect='auto',origin='lower',extent=[x0,x1,y0,y1])
ax1.set_title('Green=low, red=high,Blue=masked')
cbar=fig.colorbar(im,extend='both',shrink=0.9,ax=ax1)
cbar.set_label('uniform')

for ticklabel in ax1.xaxis.get_ticklabels():
    ticklabel.set_visible(False)
    
im=ax2.imshow(Zm,interpolation='nearest',cmap=palette,
             norm=colors.BoundaryNorm([-1,-0.5,-0.2,0,0.2,0.5,1],ncolors=palette.N),
             aspect='auto',origin='lower',extent=[x0,x1,y0,y1])
ax2.set_title('With BoundaryNorm')
cbar=fig.colorbar(im,extend='both',spacing='proportional',shrink=0.9,ax=ax2)
cbar.set_label('proportional')

fig.suptitle('imshow, with out-of-range and maskd data')



################6/NonUniformImage
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.image import NonUniformImage
from matplotlib import cm

interp='nearest'

x=np.linspace(-4,4,9)

x2=x**3

y=np.linspace(-4,4,9)
z=np.sqrt(x[np.newaxis,:]**2+y[:,np.newaxis]**2)
#x[np.newaxis,:]--一行；y[:,np.newaxis]--一列

fig,axes=plt.subplots(nrows=2,ncols=2)
fig.suptitle('NonUniformImage class',fontsize='large')
ax=axes[0,0]
im=NonUniformImage(ax,interpolation=interp,extent=(-4,4,-4,4),
                  cmap=cm.Purples)
im.set_data(x,y,z)
ax.images.append(im)
ax.set_xlim(-4,4)
ax.set_ylim(-4,4)
ax.set_title(interp)

ax=axes[0,1]
im=NonUniformImage(ax,interpolation=interp,extent=(-64,64,-4,4),cmap=cm.Purples)
im.set_data(x,y,z)
ax.images.append(im)
ax.set_xlim(-64,64)
ax.set_ylim(-4,4)
ax.set_title(interp)

interp='bilinear'
ax=axes[1,0]
im=NonUniformImage(ax,interpolation=interp,extent=(-4,4,-4,4),cmap=cm.Purples)
im.set_data(x,y,z)
ax.images.append(im)
ax.set_xlim(-4,4)
ax.set_ylim(-4,4)
ax.set_title(interp)

ax = axes[1, 1]
im = NonUniformImage(ax, interpolation=interp, extent=(-64, 64, -4, 4),
                     cmap=cm.Purples)
im.set_data(x2, y, z)
ax.images.append(im)
ax.set_xlim(-64, 64)
ax.set_ylim(-4, 4)
ax.set_title(interp)

####################7 transparency
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize

def normal_pdf(x,mean,var):
    return np.exp(-(x-mean)**2/(2*var))

xmin, xmax, ymin, ymax=(0,100,0,100)
n_bins=100
xx=np.linspace(xmin,xmax,n_bins)
yy=np.linspace(ymin,xmax,n_bins)

means_high=[20,50]
means_low=[50,60]
var=[150,200]

gauss_x_high=normal_pdf(xx,means_high[0],var[0])
gauss_y_high=normal_pdf(yy,means_high[1],var[0])

gauss_x_low=normal_pdf(xx,means_low[0],var[1])
gauss_y_low=normal_pdf(yy,means_low[1],var[1])

weights_high=np.array(np.meshgrid(gauss_x_high,gauss_y_high)).prod(0)
weights_low=-1*np.array(np.meshgrid(gauss_x_low,gauss_y_low)).prod(0)

weights=weights_high+weights_low

greys=np.full((*weights.shape,3),70,dtype=np.uint8)#用70填充的shape*3的新数组

vmax=np.abs(weights).max()
vmin=-vmax
cmap=plt.cm.RdYlBu

fig,ax=plt.subplots()
ax.imshow(greys)
ax.imshow(weights,extent=(xmin,xmax,ymin,ymax),cmap=cmap)
ax.set_axis_off()

##（2）
alpha=np.ones(weights.shape)
alpha[:,30:]=np.linspace(1,0,70)

colors=Normalize(vmin,vmax,clip=True)(weights)
colors=cmap(colors)
colors[...,-1]=alpha  #？？？？？？？？？？

fig,ax=plt.subplots()
ax.imshow(greys)
ax.imshow(colors,extent=(xmin,xmax,ymin,ymax))
ax.set_axis_off()

##（3）
alpha=Normalize(0,0.3,clip=True)(np.abs(weights))
alpha=np.clip(alpha,0.4,1)  #0.4~1之间的数据将会被剪掉

colors=Normalize(vmin,vmax)(weights)
colors=cmap(colors)

colors[...,-1]=alpha

fig,ax=plt.subplots()
ax.imshow(greys)
ax.imshow(colors,extent=(xmin,xmax,ymin,ymax))

ax.contour(weights[::-1],levels=[-0.1,0.1],colors='k',linestyles='-')
                 #翻转weights
ax.set_axis_off()

ax.contourf(weights[::-1],levels=[-0.0001,0.0001],colors='k',linestyles='-')
ax.set_axis_off()

###############8/
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(19680801)

X=10*np.random.rand(5,3)

fig, ax=plt.subplots()
ax.imshow(X,interpolation='nearest')
numrows, numcols=X.shape

def format_coord(x,y):
    col=int(x+0.5)
    row=int(y+0.5)
    if col>=0 and col<numcols and row>=0 and row<numrows:
        z=X[row,col]
        return 'x=%1.4f, y=%1.4f, z=%1.4f'%(x,y,z)
    else:
        return 'x=%1.4f, y=%1.4f'%(x,y)

ax.format_coord=format_coord


###############9/imshow  and interpolation
import matplotlib.pyplot as plt
import numpy as np

methods= [None, 'none', 'nearest', 'bilinear', 'bicubic', 'spline16',
           'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric',
           'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos']

np.random.seed(19680801)

grid=np.random.rand(4,4)

fig, axes=plt.subplots(nrows=3, ncols=6, figsize=(9,6),subplot_kw={'xticks':[],'yticks':[]})

for ax, interp in zip(axes.flat, methods):
    ax.imshow(grid,interpolation=interp, cmap='viridis')
    ax.set_title(str(interp))
    
plt.tight_layout()


#############10/


