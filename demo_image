##############??????不出图
import numpy as np
import matplotlib as mpl
mpl.use('TkAgg')
import matplotlib.pyplot as plt

%matplotlib inline
fig=plt.figure()
Z=np.arange(10000).reshape((100,100))
Z[:,50:]=1

im1=fig.figimage(Z,xo=50,yo=0,origin='lower')
im2=fig.figimage(Z,xo=100,yo=100,alpha=0.8,origin='lower')        
plt.show()

################2/
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

vegetables=["cucumber", "tomato", "lettuce", "asparagus",
              "potato", "wheat", "barley"]
farmers = ["Farmer Joe", "Upland Bros.", "Smith Gardening",
           "Agrifun", "Organiculture", "BioGoods Ltd.", "Cornylee Corp."]

harvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],
                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],
                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],
                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])

fig,ax=plt.subplots()
im=ax.imshow(harvest)

ax.set_xticks(np.arange(len(farmers)))
ax.set_yticks(np.arange(len(vegetables)))

ax.set_xticklabels(farmers)
ax.set_yticklabels(vegetables)

plt.setp(ax.get_xticklabels(),rotation=45,ha='right',rotation_mode='anchor')

for i in range(len(vegetables)):
    for j in range(len(farmers)):
        text=ax.text(j,i,harvest[i,j],ha='center',va='center',color='w')
        
ax.set_title('Harvest of local farmers (in tons/year)')
fig.tight_layout()

#############3/
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# sphinx_gallery_thumbnail_number = 2

vegetables = ["cucumber", "tomato", "lettuce", "asparagus",
              "potato", "wheat", "barley"]
farmers = ["Farmer Joe", "Upland Bros.", "Smith Gardening",
           "Agrifun", "Organiculture", "BioGoods Ltd.", "Cornylee Corp."]

harvest = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],
                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],
                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],
                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])


fig, ax = plt.subplots()
im = ax.imshow(harvest)

# We want to show all ticks...
ax.set_xticks(np.arange(len(farmers)))
ax.set_yticks(np.arange(len(vegetables)))
# ... and label them with the respective list entries
ax.set_xticklabels(farmers)
ax.set_yticklabels(vegetables)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
         rotation_mode="anchor")

# Loop over data dimensions and create text annotations.
for i in range(len(vegetables)):
    for j in range(len(farmers)):
        text = ax.text(j, i, harvest[i, j],
                       ha="center", va="center", color="w")

ax.set_title("Harvest of local farmers (in tons/year)")
fig.tight_layout()
plt.show()


##(2)
def heatmap_fun(data,row_labels,col_labels,ax=None,cbar_kw={},cbarlabel='',**kwargs):
    if not ax:
        ax=plt.gca() #获得当前的
    
    im=ax.imshow(data,**kwargs)
    
    cbar=ax.figure.colorbar(im,ax=ax,**cbar_kw)
    cbar.ax.set_ylabel(cbarlabel,rotation=-90,va='bottom')
    
    ax.set_xticks(np.arange(data.shape[1]))
    ax.set_yticks(np.arange(data.shape[0]))
    
    ax.set_xticklabels(col_labels)
    ax.set_yticklabels(row_labels)
    
    ax.tick_params(top=True,bottom=False,labeltop=True,labelbottom=False)
    
    plt.setp(ax.get_xticklabels(),rotation=-30,ha='right',rotation_mode='anchor')
    
    for edge, spine in ax.spines.items():
        spine.set_visible(False)
        
    ax.set_xticks(np.arange(data.shape[1]+1)-0.5,minor=True)
    ax.set_yticks(np.arange(data.shape[0]+1)-0.5,minor=True)
    ax.grid(which='minor',color='w',linestyle='-',linewidth=3)
    ax.tick_params(which='minor',bottom=False,left=False)
    
    return im, cbar
    
def annotate_heatmap(im,data=None,valfmt='{x:.2f}',textcolors=['black','white'],
                    threshold=None,**textkw):
    if not isinstance(data,(list,np.ndarray)):
        data=im.get_array()
    
    if threshold is not None:
        threshold=im.norm(threshold)
    else:
        threshold=im.norm(data.max())/2
        
    kw=dict(horizontalalignment='center',verticalalignment='center')
    kw.update(textkw)
    
    if isinstance(valfmt,str):
        valfmt=mpl.ticker.StrMethodFormatter(valfmt)
        
    texts=[]
    for i in range(data.shape[0]):
        for j in range(data.shape[1]):
            
            kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
            text=im.axes.text(j,i,valfmt(data[i,j],None),**kw)
            texts.append(text)
            
    return texts

fig, ax=plt.subplots()
im,cbar=heatmap_fun(harvest,vegetables,farmers,ax=ax,cmap='YlGn',cbarlabel='harvest[t/year]')
texts=annotate_heatmap(im,valfmt='{x:.1f} t')

fig.tight_layout()
    




